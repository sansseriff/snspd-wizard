"""
mcrCurveParams.py - Generated Configuration
Author: SNSPD Library Rewrite
Date: {{date}}

MCR curve measurement parameters and instrument configuration.
This file was automatically generated by the SNSPD CLI tool.
"""

# Import measurement class and parameters  
from snspd_measure.lib.measurements.mcr_curve.mcr_curve import MCRCurveMeasurement

# Import selected instrument classes
from instruments.{{voltage_source_module}} import {{voltage_source_class}}
from instruments.{{voltage_sense_module}} import {{voltage_sense_class}}
from instruments.{{attenuator_module}} import {{attenuator_class}}
from instruments.{{counter_module}} import {{counter_class}}

from dataclasses import dataclass
from pathlib import Path
import yaml


@dataclass
class MCRCurveParams:
    """Pure measurement parameters for MCR curve measurements"""
    
    # Bias voltage parameters
    bias_voltage: float = 0.8  # Fixed bias voltage for MCR measurement
    settling_time: float = 0.1  # seconds
    
    # Optical attenuation sweep parameters
    atten_start_db: float = 0.0
    atten_end_db: float = 40.0
    atten_step_db: float = 1.0
    
    # Measurement settings
    num_averages: int = 3
    background_measurements: int = 5
    reference_measurements: int = 10
    
    # Efficiency calculation
    calculate_efficiency: bool = True
    reference_photon_rate: float = 1e6  # photons/sec
    
    # Data handling
    save_data: bool = True
    plot_realtime: bool = True
    
    # Comments and metadata
    comments: str = "MCR curve measurement"


@dataclass 
class InstrumentConfig:
    """Instrument configuration loaded from YAML"""
    
    voltage_source: {{voltage_source_class}} = None
    voltage_sense: {{voltage_sense_class}} = None
    attenuator: {{attenuator_class}} = None
    counter: {{counter_class}} = None
    
    def __post_init__(self):
        """Initialize instruments with their configurations from YAML"""
        pass


# Load complete configuration from YAML
with open("mcrCurve_complete.yml") as f:
    config = yaml.safe_load(f)

# Create measurement parameters (modify these as needed)
measurement_params = MCRCurveParams()

# Initialize instrument configurations from YAML
def create_instrument_config():
    """Create instrument instances from YAML configuration"""
    
    # Extract instrument-specific configs from the complete YAML
    voltage_source_config = config.get('instruments', {}).get('{{voltage_source_class_lower}}', {})
    voltage_sense_config = config.get('instruments', {}).get('{{voltage_sense_class_lower}}', {})
    attenuator_config = config.get('instruments', {}).get('{{attenuator_class_lower}}', {})
    counter_config = config.get('instruments', {}).get('{{counter_class_lower}}', {})
    
    # Create instrument instances with their configurations
    voltage_source = {{voltage_source_class}}(**voltage_source_config) if voltage_source_config else {{voltage_source_class}}()
    voltage_sense = {{voltage_sense_class}}(**voltage_sense_config) if voltage_sense_config else {{voltage_sense_class}}()
    attenuator = {{attenuator_class}}(**attenuator_config) if attenuator_config else {{attenuator_class}}()
    counter = {{counter_class}}(**counter_config) if counter_config else {{counter_class}}()
    
    return InstrumentConfig(
        voltage_source=voltage_source,
        voltage_sense=voltage_sense,
        attenuator=attenuator,
        counter=counter
    )

# Create the complete measurement setup
instruments = create_instrument_config()

# Create measurement instance
measurement = MCRCurveMeasurement(
    params=measurement_params,
    voltage_source=instruments.voltage_source,
    voltage_sense=instruments.voltage_sense,
    attenuator=instruments.attenuator,
    counter=instruments.counter,
    output_dir=Path("./data")
)

# Example usage:
# results = measurement.run_measurement()
# measurement.save_data(results)