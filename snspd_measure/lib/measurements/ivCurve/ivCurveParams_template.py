"""
ivCurveParams.py - Generated Configuration
Author: SNSPD Library Rewrite
Date: {{date}}

IV curve measurement parameters and instrument configuration.
This file was automatically generated by the SNSPD CLI tool.
"""

# Import measurement class and parameters
from measurements.ivCurve.ivCurve import IVCurveMeasurement
from snspd_measure.lib.utilities.yaml_class import YamlClass

from lib.instruments.general.genericSense import GenericSense, StandInGenericSense
from lib.instruments.general.genericSource import GenericSource, StandInGenericSource


from lib.savers.genericSaver import GenericSaver
from lib.plotters.genericPlotter import GenericPlotter

####################### subclasses of generic instruments here #######################

# to add
# from lib.instruments.{{voltage_source_class}} import {{voltage_source_class}}
# from lib.instruments.{{current_meter_class}} import {{current_meter_class}}


# and mainframe classes. Haven't figured that how yet.


######################################################################################

from dataclasses import dataclass
from pathlib import Path
import yaml


@dataclass
class IVCurveParams(YamlClass):
    """Parameters for IV curve measurements"""

    start_V: float = 0.0
    end_V: float = 1.4
    step_V: float = 0.005
    bias_resistance: float = 100e3


@dataclass
class IVCurveResources(YamlClass):
    """Pure measurement parameters for IV curve measurements"""

    saver: GenericSaver
    plotter: GenericPlotter
    voltage_source: GenericSource
    voltage_sense: GenericSense

    params: IVCurveParams


# Initialize instrument configurations from YAML
def create_instrument_config():
    """Create instrument instances from YAML configuration"""

    # Extract instrument-specific configs from the complete YAML
    voltage_source_config = config.get("instruments", {}).get(
        "{{voltage_source_class_lower}}", {}
    )
    voltage_sense_config = config.get("instruments", {}).get(
        "{{voltage_sense_class_lower}}", {}
    )

    ####################### instantiation of subclasses here #######################

    # to fill

    # voltage_source = ({{voltage_source_class}}(**voltage_source_config) if voltage_source_config else {{voltage_source_class}}())
    # voltage_sense = ({{voltage_sense_class}}(**voltage_sense_config) if voltage_sense_config else {{voltage_sense_class}}())

    # to delete
    voltage_source = StandInGenericSource(**voltage_source_config)
    voltage_sense = StandInGenericSense(**voltage_sense_config)

    top = from_yaml("/path/to/file")

    instruments: InstrumentParams = create_params_from_spec(top, key="instruments")

    mainframe_params: Sim900Params = create_params_from_spec(instruments, key="sim900")

    mainframe_1 = Sim900(mainframe_params)

    vsource_1_params: Sim928Params = create_params_from_attribute(
        mainframe_params.modules, attribute="vsource_1"
    )

    voltage_source_1 = mainframe_1.create_submodule(vsource_1_params)

    vsense_1_params: Sim970Params = create_params_from_attribute(
        mainframe_params.modules, attribute="vsense_1"
    )

    voltage_sense_1 = mainframe_1.create_submodule(vsense_1_params)

    dbay_params: DbayParams = create_params_from_spec(instruments, "Dbay")

    mainframe_2 = Dbay(dbay_params)

    vsource_2_params: Dac4DParams = create_params_from_attribute(
        dbay_params.modules, "vsource_2"
    )

    voltage_source_2 = mainframe_2.create_submodule(vsource_2_params)

    vsense_2_params: Adc4DParams = create_params_from_attribute(
        dbay_params.modules, "vsense_2"
    )

    voltage_sense_2 = mainframe_2.create_submodule(vsense_2_params)

    ######################################################################################

    return InstrumentConfig(voltage_source=voltage_source, voltage_sense=voltage_sense)


if __name__ == "__main__":
    # Load complete configuration from YAML
    with open("ivCurve_complete.yml") as f:
        config = yaml.safe_load(f)

    # Create measurement parameters (modify these as needed)
    measurement_params = IVCurveParams.from_yaml("ivCurve_params.yml")

    # Create the complete measurement setup
    instruments = create_instrument_config()

    # Create measurement instance
    measurement = IVCurveMeasurement(
        params=measurement_params,
        voltage_source=instruments.voltage_source,
        voltage_sense=instruments.voltage_sense,
        output_dir=Path("./data"),
    )

    measurement.run_measurement()


# Example configurations for different measurement scenarios:

# Quick test measurement
# measurement_params = IVCurveParams(
#     start_voltage=0.0,
#     end_voltage=0.5,        # Lower max voltage
#     step_voltage=0.02,      # Larger steps for speed
#     settling_time=0.005,    # Faster settling
#     bias_resistance=100e3,
#     enable_plotting=True,
#     save_data=False         # Don't save for quick tests
# )

# Low current device (high bias resistance)
# measurement_params = IVCurveParams(
#     start_voltage=0.0,
#     end_voltage=3.0,        # Higher voltage for low current devices
#     step_voltage=0.01,
#     settling_time=0.02,
#     bias_resistance=1e6,    # 1 MÎ© bias resistor
#     enable_plotting=True,
#     save_data=True
# )

# Example usage:
# results = measurement.run_measurement()
# measurement.save_data(results)
