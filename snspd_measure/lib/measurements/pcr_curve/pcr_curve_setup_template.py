"""
pcrCurveParams.py - Generated Configuration
Author: SNSPD Library Rewrite
Date: {{date}}

PCR curve measurement parameters and instrument configuration.
This file was automatically generated by the SNSPD CLI tool.
"""

"""
pcrCurveParams.py - Generated Configuration
Author: SNSPD Library Rewrite
Date: {{date}}

PCR curve measurement parameters and instrument configuration.
This file was automatically generated by the SNSPD CLI tool.
"""

# Import measurement class and parameters  
from snspd_measure.lib.measurements.pcr_curve.pcr_curve import PCRCurve

# Import selected instrument classes
# from instruments.{{voltage_source_module}} import {{voltage_source_class}}
# from instruments.{{counter_module}} import {{counter_class}}

from dataclasses import dataclass
from pathlib import Path
import yaml


@dataclass
class PCRCurveParams:
    """Pure measurement parameters for PCR curve measurements"""
    
    # Bias voltage sweep parameters
    bias_start_V: float = 0.0
    bias_end_V: float = 1.0
    bias_step_V: float = 0.01
    
    # Measurement settings
    num_sweeps: int = 1
    settling_time: float = 0.1  # seconds
    photon_rate: float = 100000  # photons/sec (for calibration)
    
    # Data handling
    save_data: bool = True
    real_time_plot: bool = True
    
    # Comments and metadata
    comments: str = "PCR curve measurement"


@dataclass 
class InstrumentConfig:
    """Instrument configuration loaded from YAML"""
    
    voltage_source: {{voltage_source_class}} = None
    counter: {{counter_class}} = None
    
    def __post_init__(self):
        """Initialize instruments with their configurations from YAML"""
        pass


# Load complete configuration from YAML
with open("pcrCurve_complete.yml") as f:
    config = yaml.safe_load(f)

# Create measurement parameters (modify these as needed)
measurement_params = PCRCurveParams()

# Initialize instrument configurations from YAML
def create_instrument_config():
    """Create instrument instances from YAML configuration"""
    
    # Extract instrument-specific configs from the complete YAML
    voltage_source_config = config.get('instruments', {}).get('{{voltage_source_class_lower}}', {})
    counter_config = config.get('instruments', {}).get('{{counter_class_lower}}', {})
    
    # Create instrument instances with their configurations
    voltage_source = {{voltage_source_class}}(**voltage_source_config) if voltage_source_config else {{voltage_source_class}}()
    counter = {{counter_class}}(**counter_config) if counter_config else {{counter_class}}()
    
    return InstrumentConfig(
        voltage_source=voltage_source,
        counter=counter
    )

# Create the complete measurement setup
instruments = create_instrument_config()

# Create measurement instance
measurement = PCRCurve(
    params=measurement_params,
    output_dir=Path("./data")
)

# Set instruments for the measurement
measurement.set_instruments(
    voltage_source=instruments.voltage_source,
    voltmeter=instruments.voltage_source,  # Many voltage sources can also sense voltage
    counter=instruments.counter
)
