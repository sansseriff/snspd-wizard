"""
ivCurveParams.py - Generated Configuration
Author: SNSPD Library Rewrite
Date: {{date}}

IV curve measurement parameters and instrument configuration.
This file was automatically generated by the SNSPD CLI tool.
"""

# Import measurement class and parameters
from measurements.iv_curve.iv_curve import IVCurveMeasurement

from instruments.general.vsense import VSense, StandInVSense
from instruments.general.vsource import VSource, StandInVSource


from savers.saver import GenericSaver, StandInSaver
from plotters.plotter import GenericPlotter, StandInPlotter

####################### subclasses of generic instruments here #######################

# CLI automatically added imports go here


######################################################################################

from dataclasses import dataclass
from pathlib import Path
import yaml

from pydantic import BaseModel


@dataclass
class IVCurveParams(BaseModel):
    """Parameters for IV curve measurements"""

    start_V: float = 0.0
    end_V: float = 1.4
    step_V: float = 0.005
    bias_resistance: float = 100e3


@dataclass
class IVCurveResources:
    """Pure measurement parameters for IV curve measurements"""

    saver: GenericSaver
    plotter: GenericPlotter
    voltage_source: VSource
    voltage_sense: VSense

    params: IVCurveParams


# Initialize instrument configurations from YAML
def create_instrument_resources():
    """Create instrument instances from YAML configuration"""

    # Extract instrument-specific configs from the complete YAML
    voltage_source_config = config.get("instruments", {}).get(
        "{{voltage_source_class_lower}}", {}
    )
    voltage_sense_config = config.get("instruments", {}).get(
        "{{voltage_sense_class_lower}}", {}
    )

    saver_config = config.get("saver", {})
    plotter_config = config.get("plotter", {})

    ####################### instantiation of subclasses here #######################

    # to delete
    saver_1 = StandInSaver(**saver_config)
    plotter_1 = StandInPlotter(**plotter_config)

    voltage_source_1 = StandInVSource(**voltage_source_config)
    voltage_sense_1 = StandInVSense(**voltage_sense_config)

    # to fill, CLI output goes here

    ######################################################################################

    return IVCurveResources(
        saver=saver_1,
        plotter=plotter_1,
        voltage_source=voltage_source_1,
        voltage_sense=voltage_sense_1,
        params=IVCurveParams(),
    )


if __name__ == "__main__":
    # Load complete configuration from YAML
    with open("ivCurve_complete.yml") as f:
        config = yaml.safe_load(f)

    # # Create measurement parameters (modify these as needed)
    # measurement_params = IVCurveParams.from_yaml("ivCurve_params.yml")
    measurement_params = "nothing"

    # Create the complete measurement setup
    resources = create_instrument_resources()

    # Create measurement instance
    measurement = IVCurveMeasurement(resources)

    measurement.run_measurement()
